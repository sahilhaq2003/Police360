import React, { useState, useRef } from 'react';
import PoliceHeader from '../PoliceHeader/PoliceHeader';
import { useNavigate } from 'react-router-dom';
import axiosInstance from '../../utils/axiosInstance';
import { getMediaUrl } from '../../utils/mediaUrl';

export default function Suspect() {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [form, setForm] = useState({
    suspectId: '',
    fileNumber: '',
    recordId: '',
    nic: '',
    name: '',
    aliases: '',
    address: '',
    gender: '',
    citizen: '',
    dob: { d: '', m: '', y: '' },
    otherInfo: '',
    crimeInfo: '',
    suspectStatus: '',
    arrestDate: '',
    prisonDays: '',
    releaseDate: '',
  });

  // photo
  const [photoPreview, setPhotoPreview] = useState('');
  const [photoFile, setPhotoFile] = useState(null);
  const photoRef = useRef(null);


  const update = (k, v) => setForm((s) => ({ ...s, [k]: v }));

  const handlePhoto = (e) => {
    const f = e.target.files?.[0];
    if (!f) return;
    const url = URL.createObjectURL(f);
    setPhotoPreview(url);
    setPhotoFile(f);
  };

  

  const uploadFile = async (file) => {
    if (!file) return null;
    const fd = new FormData();
    fd.append('file', file);
    try {
      const res = await axiosInstance.post('/uploads/criminal', fd, { headers: { 'Content-Type': 'multipart/form-data' } });
      return res.data?.fileUrl || null;
    } catch (err) {
      console.error('Upload failed', err);
      return null;
    }
  };

  const handleSave = async (e) => {
    e?.preventDefault();
    setLoading(true);
    try {
      const payload = { ...form };
      // upload photo if present
      if (photoFile) {
        const p = await uploadFile(photoFile);
        if (p) payload.photo = p;
      }

      await axiosInstance.post('/suspects', payload);
      alert('Suspect saved');
      navigate('/SuspectManage/SuspectManage');
    } catch (err) {
      console.error(err);
      alert('Failed to save suspect');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#F6F8FC] via-[#EEF2F7] to-[#F6F8FC] text-[#0B214A]">
      <PoliceHeader />
    
      <div className="max-w-5xl mx-auto px-4 py-10">
        <form onSubmit={handleSave} className="bg-white rounded-lg shadow p-6 space-y-4">
          {/* Top Header (moved inside form to match Criminal form layout) */}
          <div className="flex items-start justify-between mb-6">
            <div className="flex items-start gap-3">
              <div className="h-15 w-15 rounded-full bg-[#0B214A] flex items-center justify-center">
                <img src="/src/assets/PLogo.png" alt="Police Logo" className="h-15 w-15 object-contain" />
              </div>
              <div>
                <h1 className="text-xl font-semibold tracking-wide text-[#0B214A] bg-white p-2 rounded-md">SUSPECT RECORD</h1>
                <span className="text-[12px] text-gray-500 b">
                  Made by {localStorage.getItem('userName') || sessionStorage.getItem('userName') || '_____'}
                </span>
              </div>
            </div>
            <div className="text-right">
              <div className="text-[11px] uppercase text-gray-500 bg-white p-2 rounded-md">
                File Number #
                <span className="ml-2 inline-block min-w-32 border border-gray-400 px-2 py-2 text-gray-700 font-mono text-xs">
                  {form.fileNumber}
                </span>
              </div>
              <div className="mt-1 text-[11px] uppercase text-gray-500 bg-white p-2 rounded-md">
                Record ID
                <span className="ml-1 inline-block min-w-32 border border-gray-400 px-2 py-2 text-gray-700 font-mono text-xs">
                  {form.recordId}
                </span>
              </div>
              <div className="mt-1 text-[10px] text-gray-400">Generated by the Police Computer</div>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">

            
            <div>
              <label className="block text-xs text-gray-600">Suspect ID</label>
              <input value={form.suspectId} onChange={(e) => update('suspectId', e.target.value)} className="w-full border rounded px-3 py-2" />
            </div>
            <div>
              <label className="block text-xs text-gray-600">NIC</label>
              <input value={form.nic} onChange={(e) => update('nic', e.target.value)} className="w-full border rounded px-3 py-2" />
            </div>
            
          </div>

          <div>
            <label className="block text-xs text-gray-600">Full Name</label>
            <input value={form.name} onChange={(e) => update('name', e.target.value)} className="w-full border rounded px-3 py-2" />
          </div>

          <div>
            <label className="block text-xs text-gray-600">Address</label>
            <textarea value={form.address} onChange={(e) => update('address', e.target.value)} className="w-full border rounded px-3 py-2" />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-xs text-gray-600">Gender</label>
              <select value={form.gender} onChange={(e) => update('gender', e.target.value)} className="w-full border rounded px-3 py-2">
                <option value="">Select</option>
                <option>Male</option>
                <option>Female</option>
                <option>Other</option>
              </select>
            </div>

            <div>
              
              <label className="block text-xs text-gray-600">Citizenship </label>
              
              <input value={form.citizen} onChange={(e) => update('citizen', e.target.value)} className="w-full border rounded px-3 py-2" />
            </div>

            <div>
              <label className="block text-xs text-gray-600">Date of Birth (d/m/y)</label>
              <div className="flex gap-2">
                <input value={form.dob.d} onChange={(e) => update('dob', { ...form.dob, d: e.target.value })} className="w-1/3 border rounded px-3 py-2" />
                <input value={form.dob.m} onChange={(e) => update('dob', { ...form.dob, m: e.target.value })} className="w-1/3 border rounded px-3 py-2" />
                <input value={form.dob.y} onChange={(e) => update('dob', { ...form.dob, y: e.target.value })} className="w-1/3 border rounded px-3 py-2" />
              </div>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-xs text-gray-600">Status</label>
              <select value={form.suspectStatus} onChange={(e) => update('suspectStatus', e.target.value)} className="w-full border rounded px-3 py-2">
                <option value="">Select</option>
                <option value="wanted">Wanted</option>
                <option value="arrested">Arrested</option>
                <option value="in prison">In Prison</option>
                <option value="released">Released</option>
              </select>
            </div>
            <div>
              <label className="block text-xs text-gray-600">Arrest Date</label>
              <input type="date" value={form.arrestDate} onChange={(e) => update('arrestDate', e.target.value)} className="w-full border rounded px-3 py-2" />
            </div>
          </div>

          <div>
            <label className="block text-xs text-gray-600">Photo</label>
            <div className="flex items-center gap-4">
              <div className="w-28 h-28 bg-gray-100 rounded overflow-hidden">
                {photoPreview ? (
                  <img src={getMediaUrl(photoPreview)} alt="preview" className="w-full h-full object-cover" />
                ) : (
                  <div className="w-full h-full flex items-center justify-center text-gray-400">No photo</div>
                )}
              </div>
              <div>
                <input ref={photoRef} type="file" accept="image/*" onChange={handlePhoto} className="hidden" />
                <button type="button" onClick={() => photoRef.current?.click()} className="px-3 py-2 bg-[#0B214A] text-white rounded">Select Photo</button>
                {photoPreview && <button type="button" onClick={() => { setPhotoPreview(''); setPhotoFile(null); }} className="ml-2 px-3 py-2 border rounded">Remove</button>}
              </div>
            </div>
          </div>

          <div className="flex items-center gap-3 justify-center">
            <button type="submit" disabled={loading} className="px-4 py-2 bg-green-600 text-white rounded">{loading ? 'Saving...' : 'Save Suspect'}</button>
            <button type="button" onClick={() => navigate('/SuspectManage/SuspectManage')} className="px-4 py-2 border rounded">Cancel</button>
          </div>
        </form>
      </div>
    </div>
  );
}
