import React, { useState, useRef } from 'react';
import PoliceHeader from '../PoliceHeader/PoliceHeader';
import { useNavigate } from 'react-router-dom';
import axiosInstance from '../../utils/axiosInstance';
import { getMediaUrl } from '../../utils/mediaUrl';

export default function Suspect() {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [form, setForm] = useState({
    suspectId: '',
    fileNumber: '',
    recordId: '',
    nic: '',
    name: '',
    aliases: '',
    address: '',
    gender: '',
    citizen: '',
    dob: { d: '', m: '', y: '' },
    otherInfo: '',
    crimeInfo: '',
    suspectStatus: '',
    arrestDate: '',
    prisonDays: '',
    releaseDate: '',
  });

  // photo
  const [photoPreview, setPhotoPreview] = useState('');
  const [photoFile, setPhotoFile] = useState(null);
  const photoRef = useRef(null);

  const update = (k, v) => setForm((s) => ({ ...s, [k]: v }));

  const handlePhoto = (e) => {
    const f = e.target.files?.[0];
    if (!f) return;
    const url = URL.createObjectURL(f);
    setPhotoPreview(url);
    setPhotoFile(f);
  };

  const uploadFile = async (file) => {
    if (!file) return null;
    const fd = new FormData();
    fd.append('file', file);
    try {
      const res = await axiosInstance.post('/uploads/criminal', fd, { headers: { 'Content-Type': 'multipart/form-data' } });
      return res.data?.fileUrl || null;
    } catch (err) {
      console.error('Upload failed', err);
      return null;
    }
  };

  const handleSave = async (e) => {
    e?.preventDefault();
    setLoading(true);
    try {
      const payload = { ...form };
      if (photoFile) {
        const p = await uploadFile(photoFile);
        if (p) payload.photo = p;
      }
      await axiosInstance.post('/suspects', payload);
      alert('Suspect saved');
      navigate('/SuspectManage/SuspectManage');
    } catch (err) {
      console.error(err);
      alert('Failed to save suspect');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#F6F8FC] via-[#EEF2F7] to-[#F6F8FC] text-[#0B214A]">
      <PoliceHeader />
      <br/>
      <br/>

      <h1 className="text-4xl font-extrabold tracking-tight text-center mb-10">
        Add Suspect Record
      </h1>
      
      <div className="mx-auto max-w-7xl border border-gray-300 rounded-4xl p-6 md:p-6 bg-white shadow p-6">
        {/* Top Header */}
        <div className="flex items-start justify-between">
          <div className="flex items-start gap-3">
            <div className="h-15 w-15 rounded-full bg-[#0B214A] flex items-center justify-center">
              <img src="/src/assets/PLogo.png" alt="Police Logo" className="h-15 w-15 object-contain" />
            </div>
            <div>
              <h1 className="text-xl font-semibold tracking-wide text-[#0B214A] bg-white p-2 rounded-md">SUSPECT RECORD</h1>
              <span className="text-[12px] text-gray-500 b">
                Made by {localStorage.getItem('userName') || sessionStorage.getItem('userName') || '_____'}
              </span>
            </div>
          </div>
          <div className="text-right">
            <div className="text-[11px] uppercase text-gray-500 bg-white p-2 rounded-md">
              File Number #
              <span className="ml-2 inline-block min-w-32 border border-gray-400 px-2 py-0.5 text-gray-700 font-mono text-xs">
                {form.fileNumber}
              </span>
            </div>
            <div className="mt-1 text-[11px] uppercase text-gray-500 bg-white p-2 rounded-md">
              Record ID
              <span className="ml-2 inline-block min-w-32 border border-gray-400 px-2 py-0.5 text-gray-700 font-mono text-xs">
                {form.recordId}
              </span>
            </div>
            <div className="mt-1 text-[10px] text-gray-400">Generated by the Police Computer</div>
          </div>
        </div>

        <hr className="my-4 border-gray-300 mb-10" />

        <h1 className="text-3xl font-semibold mx-auto max-w-7xl mb-10">Suspect Bio</h1>

        {/* Main Form */}
        <form onSubmit={handleSave} className="mt-4 grid grid-cols-12 gap-4 bg-white p-4 rounded-md">
          {/* Left big column */}
          <div className="col-span-12 md:col-span-8">
            {/* Suspect ID & NIC */}
            <div className="grid grid-cols-2 gap-4 mb-3">
              <div>
                <label className="mb-1 block text-[11px] uppercase tracking-wide text-gray-600">Suspect ID</label>
                <div className="flex items-center">
                  <span className="bg-gray-100 border border-gray-300 border-r-0 rounded-l px-3 py-2 text-sm text-gray-600">#</span>
                  <input
                    value={form.suspectId}
                    onChange={(e) => update('suspectId', e.target.value)}
                    placeholder="SUS123"
                    className="block w-full rounded-r border border-gray-300 bg-white px-3 py-2 text-sm"
                  />
                </div>
              </div>
              <div>
                <label className="mb-1 block text-[11px] uppercase tracking-wide text-gray-600">NIC Number</label>
                <input
                  value={form.nic}
                  onChange={(e) => update('nic', e.target.value)}
                  className="block w-full rounded border border-gray-300 bg-white px-3 py-2 text-sm"
                />
              </div>
            </div>

            {/* Name */}
            <label className="mb-1 block text-[11px] uppercase tracking-wide text-gray-600">Full Name</label>
            <input
              value={form.name}
              onChange={(e) => update('name', e.target.value)}
              className="mb-3 block w-full rounded border border-gray-300 bg-white px-3 py-2 text-sm"
            />

            {/* Aliases */}
            <label className="mb-1 block text-[11px] uppercase tracking-wide text-gray-600">Aliases</label>
            <input
              value={form.aliases}
              onChange={(e) => update('aliases', e.target.value)}
              className="mb-3 block w-full rounded border border-gray-300 bg-white px-3 py-2 text-sm"
            />

            {/* Address */}
            <label className="mb-1 block text-[11px] uppercase tracking-wide text-gray-600">Address</label>
            <input
              value={form.address}
              onChange={(e) => update('address', e.target.value)}
              className="mb-3 block w-full rounded border border-gray-300 bg-white px-3 py-2 text-sm"
            />

            {/* Two columns */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="mb-1 block text-[11px] uppercase tracking-wide text-gray-600">Gender</label>
                <select
                  value={form.gender}
                  onChange={(e) => update('gender', e.target.value)}
                  className="block w-full rounded border border-gray-300 px-3 py-2 text-sm bg-white"
                >
                  <option value="">Select Gender</option>
                  <option>Male</option>
                  <option>Female</option>
                  <option>Other</option>
                </select>
              </div>
              <div>
                <label className="mb-1 block text-[11px] uppercase tracking-wide text-gray-600">Citizen (Optional)</label>
                <input
                  value={form.citizen}
                  onChange={(e) => update('citizen', e.target.value)}
                  className="block w-full rounded border border-gray-300 px-3 py-2 text-sm bg-white"
                />
              </div>

              {/* Status */}
              <div>
                <label className="mb-1 block text-[11px] uppercase tracking-wide text-gray-600">Suspect Status</label>
                <select
                  value={form.suspectStatus}
                  onChange={(e) => update('suspectStatus', e.target.value)}
                  className="block w-full rounded border border-gray-300 px-3 py-2 text-sm bg-white"
                >
                  <option value="">Select Status</option>
                  <option value="wanted">Wanted</option>
                  <option value="arrested">Arrested</option>
                  <option value="in prison">In Prison</option>
                  <option value="released">Released</option>
                </select>
              </div>
            </div>

            {/* Conditional fields by Status (visual parity) */}
            {form.suspectStatus === 'wanted' && (
              <div className="mt-3">
                <label className="mb-1 block text-[11px] uppercase tracking-wide text-gray-600">Reward Price (LKR)</label>
                <input
                  type="number"
                  min={0}
                  step={1}
                  placeholder="Enter reward amount"
                  value={form.rewardPrice}
                  onChange={(e) => update('rewardPrice', e.target.value)}
                  className="block w-full rounded border border-gray-300 px-3 py-2 text-sm"
                />
              </div>
            )}

            {form.suspectStatus === 'arrested' && (
              <div className="mt-3">
                <label className="mb-1 block text-[11px] uppercase tracking-wide text-gray-600">Arrest Date</label>
                <input
                  type="date"
                  value={form.arrestDate}
                  onChange={(e) => update('arrestDate', e.target.value)}
                  className="block w-full rounded border border-gray-300 px-3 py-2 text-sm"
                />
              </div>
            )}

            {form.suspectStatus === 'in prison' && (
              <div className="mt-3">
                <label className="mb-1 block text-[11px] uppercase tracking-wide text-gray-600">Prison Time (days)</label>
                <input
                  type="number"
                  min={1}
                  step={1}
                  placeholder="Enter days"
                  value={form.prisonDays}
                  onChange={(e) => update('prisonDays', e.target.value)}
                  className="block w-full rounded border border-gray-300 px-3 py-2 text-sm"
                />
              </div>
            )}

            {form.suspectStatus === 'released' && (
              <div className="mt-3">
                <label className="mb-1 block text-[11px] uppercase tracking-wide text-gray-600">Release Date</label>
                <input
                  type="date"
                  value={form.releaseDate}
                  onChange={(e) => update('releaseDate', e.target.value)}
                  className="block w-full rounded border border-gray-300 px-3 py-2 text-sm"
                />
              </div>
            )}

            {/* DOB */}
            <div className="mt-3">
              <label className="mb-1 block text-[11px] uppercase tracking-wide text-gray-600">DOB</label>
              <div className="flex items-center gap-2">
                <input
                  placeholder="DD"
                  value={form.dob.d}
                  onChange={(e) => update('dob', { ...form.dob, d: e.target.value })}
                  className="h-9 w-12 rounded border border-gray-300 px-2 text-center text-sm"
                />
                <input
                  placeholder="MM"
                  value={form.dob.m}
                  onChange={(e) => update('dob', { ...form.dob, m: e.target.value })}
                  className="h-9 w-12 rounded border border-gray-300 px-2 text-center text-sm"
                />
                <input
                  placeholder="YYYY"
                  value={form.dob.y}
                  onChange={(e) => update('dob', { ...form.dob, y: e.target.value })}
                  className="h-9 w-16 rounded border border-gray-300 px-2 text-center text-sm"
                />
              </div>
            </div>
          </div>

          {/* Right photo column */}
          <div className="col-span-12 md:col-span-4">
            <div className="flex flex-col items-center">
              <div className="flex h-80 w-56 items-center justify-center border border-gray-300 bg-gray-50">
                {photoPreview ? (
                  <img src={getMediaUrl(photoPreview)} alt="Photo" className="h-full w-full object-cover" />
                ) : (
                  <span className="text-xs text-gray-400">PHOTO</span>
                )}
              </div>
              <button
                type="button"
                onClick={() => photoRef.current?.click()}
                className="mt-2 w-40 rounded border border-gray-400 bg-white px-3 py-1.5 text-sm hover:bg-gray-50"
              >
                Upload Photo
              </button>
              <input
                type="file"
                accept="image/*"
                ref={photoRef}
                onChange={handlePhoto}
                className="hidden"
              />
            </div>
          </div>

          {/* Other Info */}
          <div className="col-span-12 lg:col-span-12">
            <div className="mb-2 border-b border-gray-300 pb-2 text-[12px] font-semibold uppercase tracking-wide text-gray-700">
              Other Info
            </div>
            <textarea
              rows={8}
              value={form.otherInfo}
              onChange={(e) => update('otherInfo', e.target.value)}
              className="h-48 w-full rounded border border-gray-300 p-3 text-sm"
            />
          </div>
        </form>

        {/* Crime Info */}
        <h1 className="text-3xl font-semibold mx-auto max-w-7xl mb-10">Crime Info</h1>
        <div className="mt-6 bg-white p-4 rounded-md">
          <div className="mb-2 border-b border-gray-300 pb-2 text-[12px] font-semibold uppercase tracking-wide text-gray-700">
            Crime Info
          </div>
          <textarea
            rows={8}
            value={form.crimeInfo}
            onChange={(e) => update('crimeInfo', e.target.value)}
            className="h-48 w-full rounded border border-gray-300 p-3 text-sm"
          />
        </div>

        {/* Actions */}
        <div className="flex gap-4 justify-center">
          <button
            type="submit"
            onClick={handleSave}
            className="rounded bg-[#0B214A] px-4 py-2 text-sm font-semibold text-white hover:brightness-110"
          >
            Save
          </button>
          <button
            type="button"
            onClick={() => navigate('/SuspectManage/SuspectManage')}
            className="rounded border border-gray-300 bg-gray-50 px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
          >
            Cancel
          </button>
        </div>
      </div>
      <br/>
      <br/>
    </div>
  );
}
